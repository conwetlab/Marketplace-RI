<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="clientProvider" />
	</security:authentication-manager>

	<!-- urls and security configuration -->
	<security:http auto-config="true" entry-point-ref="fiwareEntryPoint"
		use-expressions="true" disable-url-rewriting="true">
		<security:custom-filter before="CAS_FILTER" ref="apiHeaderFilter" />
		<security:custom-filter after="CAS_FILTER" ref="clientFilter" />

		<!-- Log the user out -->
		<security:logout logout-url="/logout" logout-success-url="${oauth2.server}/${oauth2.signOutPath}" delete-cookies="JSESSIONID" invalidate-session="true" />

		<!-- Default URLs that are visible for everyone -->
		<security:intercept-url pattern="/vocabulary/**" access="hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/demoservices/**" access="hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/media/**" access="hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_USER')" />
		
		<!-- Callback must me also accessible by anonymous users -->
		<security:intercept-url pattern="/callback/**" access="hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_USER')" />
		
		<!-- When the IdM is working, users cannot be created or modified -->
		<security:intercept-url pattern="/api/v2/user/**" method="POST" access="denyAll" />
		<security:intercept-url pattern="/api/v2/user/**" method="PUT" access="denyAll" />
		<security:intercept-url pattern="/api/v2/user/**" method="DELETE" access="denyAll" />
		<security:intercept-url pattern="/api/v2/user/**" method="GET" access="hasRole('ROLE_USER')" />

		<!-- Security rule for the rest of URLs -->
		<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
	</security:http>

	<!-- entry points -->
	<bean id="fiwareEntryPoint"
		class="org.pac4j.springframework.security.web.ClientAuthenticationEntryPoint">
		<property name="client" ref="fiwareClient" />
	</bean>

	<!-- clients definition -->
	<bean id="fiwareClient" class="org.fiware.apps.marketplace.oauth2.FIWAREClient">
		<property name="serverURL" value="${oauth2.server}" />
		<property name="key" value="${oauth2.key}" />
		<property name="secret" value="${oauth2.secret}" />
	</bean>

	<bean id="clients" class="org.pac4j.core.client.Clients">
		<property name="callbackUrl" value="${oauth2.callbackURL}" />
		<property name="clients">
			<list>
				<ref bean="fiwareClient" />
			</list>
		</property>
	</bean>

	<!-- common to all clients -->
	<bean id="clientFilter"
		class="org.pac4j.springframework.security.web.ClientAuthenticationFilter">
		<constructor-arg value="/callback" />
		<property name="clients" ref="clients" />
		<property name="sessionAuthenticationStrategy" ref="sas" />
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>

	<bean id="apiHeaderFilter"
		class="org.fiware.apps.marketplace.oauth2.FIWAREHeaderAuthenticationFilter">
		<constructor-arg name="baseUrl" value="/api/" />
		<constructor-arg name="headerName" value="Authorization" />
		<property name="client" ref="fiwareClient" />
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>

	<bean id="clientProvider"
		class="org.pac4j.springframework.security.authentication.ClientAuthenticationProvider">
		<property name="clients" ref="clients" />
	</bean>

	<bean id="httpSessionRequestCache" class="org.springframework.security.web.savedrequest.HttpSessionRequestCache" />

	<bean id="sas" class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />

	<!-- Just to hide the password field -->
	<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
</beans>
